// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

package mock

import (
	gocb "github.com/couchbase/gocb"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCouchBaseAdapter is a mock of CouchBaseAdapter interface
type MockCouchBaseAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockCouchBaseAdapterMockRecorder
}

// MockCouchBaseAdapterMockRecorder is the mock recorder for MockCouchBaseAdapter
type MockCouchBaseAdapterMockRecorder struct {
	mock *MockCouchBaseAdapter
}

// NewMockCouchBaseAdapter creates a new mock instance
func NewMockCouchBaseAdapter(ctrl *gomock.Controller) *MockCouchBaseAdapter {
	mock := &MockCouchBaseAdapter{ctrl: ctrl}
	mock.recorder = &MockCouchBaseAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCouchBaseAdapter) EXPECT() *MockCouchBaseAdapterMockRecorder {
	return m.recorder
}

// Open mocks base method
func (m *MockCouchBaseAdapter) Open() error {
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (mr *MockCouchBaseAdapterMockRecorder) Open() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockCouchBaseAdapter)(nil).Open))
}

// Cluster mocks base method
func (m *MockCouchBaseAdapter) Cluster() *gocb.Cluster {
	ret := m.ctrl.Call(m, "Cluster")
	ret0, _ := ret[0].(*gocb.Cluster)
	return ret0
}

// Cluster indicates an expected call of Cluster
func (mr *MockCouchBaseAdapterMockRecorder) Cluster() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockCouchBaseAdapter)(nil).Cluster))
}

// AddBucket mocks base method
func (m *MockCouchBaseAdapter) AddBucket(bucket, password string) (*gocb.Bucket, error) {
	ret := m.ctrl.Call(m, "AddBucket", bucket, password)
	ret0, _ := ret[0].(*gocb.Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBucket indicates an expected call of AddBucket
func (mr *MockCouchBaseAdapterMockRecorder) AddBucket(bucket, password interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBucket", reflect.TypeOf((*MockCouchBaseAdapter)(nil).AddBucket), bucket, password)
}

// Bucket mocks base method
func (m *MockCouchBaseAdapter) Bucket(name string) (*gocb.Bucket, error) {
	ret := m.ctrl.Call(m, "Bucket", name)
	ret0, _ := ret[0].(*gocb.Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bucket indicates an expected call of Bucket
func (mr *MockCouchBaseAdapterMockRecorder) Bucket(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bucket", reflect.TypeOf((*MockCouchBaseAdapter)(nil).Bucket), name)
}

// Operator mocks base method
func (m *MockCouchBaseAdapter) Operator(bucketName string) (Operatable, error) {
	ret := m.ctrl.Call(m, "Operator", bucketName)
	ret0, _ := ret[0].(Operatable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Operator indicates an expected call of Operator
func (mr *MockCouchBaseAdapterMockRecorder) Operator(bucketName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Operator", reflect.TypeOf((*MockCouchBaseAdapter)(nil).Operator), bucketName)
}

// Log mocks base method
func (m *MockCouchBaseAdapter) Log(arg0 ...interface{}) {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Log", varargs...)
}

// Log indicates an expected call of Log
func (mr *MockCouchBaseAdapterMockRecorder) Log(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockCouchBaseAdapter)(nil).Log), arg0...)
}

// Logf mocks base method
func (m *MockCouchBaseAdapter) Logf(format string, v ...interface{}) {
	varargs := []interface{}{format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Logf", varargs...)
}

// Logf indicates an expected call of Logf
func (mr *MockCouchBaseAdapterMockRecorder) Logf(format interface{}, v ...interface{}) *gomock.Call {
	varargs := append([]interface{}{format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logf", reflect.TypeOf((*MockCouchBaseAdapter)(nil).Logf), varargs...)
}

// MockConfigurable is a mock of Configurable interface
type MockConfigurable struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurableMockRecorder
}

// MockConfigurableMockRecorder is the mock recorder for MockConfigurable
type MockConfigurableMockRecorder struct {
	mock *MockConfigurable
}

// NewMockConfigurable creates a new mock instance
func NewMockConfigurable(ctrl *gomock.Controller) *MockConfigurable {
	mock := &MockConfigurable{ctrl: ctrl}
	mock.recorder = &MockConfigurableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigurable) EXPECT() *MockConfigurableMockRecorder {
	return m.recorder
}

// Open mocks base method
func (m *MockConfigurable) Open() error {
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (mr *MockConfigurableMockRecorder) Open() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockConfigurable)(nil).Open))
}

// Cluster mocks base method
func (m *MockConfigurable) Cluster() *gocb.Cluster {
	ret := m.ctrl.Call(m, "Cluster")
	ret0, _ := ret[0].(*gocb.Cluster)
	return ret0
}

// Cluster indicates an expected call of Cluster
func (mr *MockConfigurableMockRecorder) Cluster() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockConfigurable)(nil).Cluster))
}

// AddBucket mocks base method
func (m *MockConfigurable) AddBucket(bucket, password string) (*gocb.Bucket, error) {
	ret := m.ctrl.Call(m, "AddBucket", bucket, password)
	ret0, _ := ret[0].(*gocb.Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBucket indicates an expected call of AddBucket
func (mr *MockConfigurableMockRecorder) AddBucket(bucket, password interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBucket", reflect.TypeOf((*MockConfigurable)(nil).AddBucket), bucket, password)
}

// Bucket mocks base method
func (m *MockConfigurable) Bucket(name string) (*gocb.Bucket, error) {
	ret := m.ctrl.Call(m, "Bucket", name)
	ret0, _ := ret[0].(*gocb.Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bucket indicates an expected call of Bucket
func (mr *MockConfigurableMockRecorder) Bucket(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bucket", reflect.TypeOf((*MockConfigurable)(nil).Bucket), name)
}

// Operator mocks base method
func (m *MockConfigurable) Operator(bucketName string) (Operatable, error) {
	ret := m.ctrl.Call(m, "Operator", bucketName)
	ret0, _ := ret[0].(Operatable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Operator indicates an expected call of Operator
func (mr *MockConfigurableMockRecorder) Operator(bucketName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Operator", reflect.TypeOf((*MockConfigurable)(nil).Operator), bucketName)
}

// MockOperatable is a mock of Operatable interface
type MockOperatable struct {
	ctrl     *gomock.Controller
	recorder *MockOperatableMockRecorder
}

// MockOperatableMockRecorder is the mock recorder for MockOperatable
type MockOperatableMockRecorder struct {
	mock *MockOperatable
}

// NewMockOperatable creates a new mock instance
func NewMockOperatable(ctrl *gomock.Controller) *MockOperatable {
	mock := &MockOperatable{ctrl: ctrl}
	mock.recorder = &MockOperatableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOperatable) EXPECT() *MockOperatableMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockOperatable) Get(key string, data interface{}) (gocb.Cas, error) {
	ret := m.ctrl.Call(m, "Get", key, data)
	ret0, _ := ret[0].(gocb.Cas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockOperatableMockRecorder) Get(key, data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOperatable)(nil).Get), key, data)
}

// Insert mocks base method
func (m *MockOperatable) Insert(key string, data interface{}, expire uint32) (gocb.Cas, error) {
	ret := m.ctrl.Call(m, "Insert", key, data, expire)
	ret0, _ := ret[0].(gocb.Cas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert
func (mr *MockOperatableMockRecorder) Insert(key, data, expire interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockOperatable)(nil).Insert), key, data, expire)
}

// Upsert mocks base method
func (m *MockOperatable) Upsert(key string, data interface{}, expire uint32) (gocb.Cas, error) {
	ret := m.ctrl.Call(m, "Upsert", key, data, expire)
	ret0, _ := ret[0].(gocb.Cas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert
func (mr *MockOperatableMockRecorder) Upsert(key, data, expire interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockOperatable)(nil).Upsert), key, data, expire)
}

// Remove mocks base method
func (m *MockOperatable) Remove(key string) (gocb.Cas, error) {
	ret := m.ctrl.Call(m, "Remove", key)
	ret0, _ := ret[0].(gocb.Cas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remove indicates an expected call of Remove
func (mr *MockOperatableMockRecorder) Remove(key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockOperatable)(nil).Remove), key)
}

// N1qlQuery mocks base method
func (m *MockOperatable) N1qlQuery(q string, params interface{}) (gocb.QueryResults, error) {
	ret := m.ctrl.Call(m, "N1qlQuery", q, params)
	ret0, _ := ret[0].(gocb.QueryResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// N1qlQuery indicates an expected call of N1qlQuery
func (mr *MockOperatableMockRecorder) N1qlQuery(q, params interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "N1qlQuery", reflect.TypeOf((*MockOperatable)(nil).N1qlQuery), q, params)
}

// N1qlQueryWithMode mocks base method
func (m *MockOperatable) N1qlQueryWithMode(mode *gocb.ConsistencyMode, q string, params interface{}) (gocb.QueryResults, error) {
	ret := m.ctrl.Call(m, "N1qlQueryWithMode", mode, q, params)
	ret0, _ := ret[0].(gocb.QueryResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// N1qlQueryWithMode indicates an expected call of N1qlQueryWithMode
func (mr *MockOperatableMockRecorder) N1qlQueryWithMode(mode, q, params interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "N1qlQueryWithMode", reflect.TypeOf((*MockOperatable)(nil).N1qlQueryWithMode), mode, q, params)
}

// MockLoggerable is a mock of Loggerable interface
type MockLoggerable struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerableMockRecorder
}

// MockLoggerableMockRecorder is the mock recorder for MockLoggerable
type MockLoggerableMockRecorder struct {
	mock *MockLoggerable
}

// NewMockLoggerable creates a new mock instance
func NewMockLoggerable(ctrl *gomock.Controller) *MockLoggerable {
	mock := &MockLoggerable{ctrl: ctrl}
	mock.recorder = &MockLoggerableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLoggerable) EXPECT() *MockLoggerableMockRecorder {
	return m.recorder
}

// Log mocks base method
func (m *MockLoggerable) Log(arg0 ...interface{}) {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Log", varargs...)
}

// Log indicates an expected call of Log
func (mr *MockLoggerableMockRecorder) Log(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockLoggerable)(nil).Log), arg0...)
}

// Logf mocks base method
func (m *MockLoggerable) Logf(format string, v ...interface{}) {
	varargs := []interface{}{format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Logf", varargs...)
}

// Logf indicates an expected call of Logf
func (mr *MockLoggerableMockRecorder) Logf(format interface{}, v ...interface{}) *gomock.Call {
	varargs := append([]interface{}{format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logf", reflect.TypeOf((*MockLoggerable)(nil).Logf), varargs...)
}
