// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/deadcheat/tcb (interfaces: CouchBaseAdapter,Configurer,Operator,Logger)

// Package mock is a generated GoMock package.
package mock

import (
	gocb "github.com/couchbase/gocb"
	tcb "github.com/deadcheat/tcb"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCouchBaseAdapter is a mock of CouchBaseAdapter interface
type MockCouchBaseAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockCouchBaseAdapterMockRecorder
}

// MockCouchBaseAdapterMockRecorder is the mock recorder for MockCouchBaseAdapter
type MockCouchBaseAdapterMockRecorder struct {
	mock *MockCouchBaseAdapter
}

// NewMockCouchBaseAdapter creates a new mock instance
func NewMockCouchBaseAdapter(ctrl *gomock.Controller) *MockCouchBaseAdapter {
	mock := &MockCouchBaseAdapter{ctrl: ctrl}
	mock.recorder = &MockCouchBaseAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCouchBaseAdapter) EXPECT() *MockCouchBaseAdapterMockRecorder {
	return m.recorder
}

// AddBucket mocks base method
func (m *MockCouchBaseAdapter) AddBucket(arg0, arg1 string) (*gocb.Bucket, error) {
	ret := m.ctrl.Call(m, "AddBucket", arg0, arg1)
	ret0, _ := ret[0].(*gocb.Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBucket indicates an expected call of AddBucket
func (mr *MockCouchBaseAdapterMockRecorder) AddBucket(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBucket", reflect.TypeOf((*MockCouchBaseAdapter)(nil).AddBucket), arg0, arg1)
}

// Bucket mocks base method
func (m *MockCouchBaseAdapter) Bucket(arg0 string) *gocb.Bucket {
	ret := m.ctrl.Call(m, "Bucket", arg0)
	ret0, _ := ret[0].(*gocb.Bucket)
	return ret0
}

// Bucket indicates an expected call of Bucket
func (mr *MockCouchBaseAdapterMockRecorder) Bucket(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bucket", reflect.TypeOf((*MockCouchBaseAdapter)(nil).Bucket), arg0)
}

// Close mocks base method
func (m *MockCouchBaseAdapter) Close(arg0 string) error {
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockCouchBaseAdapterMockRecorder) Close(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCouchBaseAdapter)(nil).Close), arg0)
}

// CloseAll mocks base method
func (m *MockCouchBaseAdapter) CloseAll() error {
	ret := m.ctrl.Call(m, "CloseAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseAll indicates an expected call of CloseAll
func (mr *MockCouchBaseAdapterMockRecorder) CloseAll() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAll", reflect.TypeOf((*MockCouchBaseAdapter)(nil).CloseAll))
}

// Cluster mocks base method
func (m *MockCouchBaseAdapter) Cluster() *gocb.Cluster {
	ret := m.ctrl.Call(m, "Cluster")
	ret0, _ := ret[0].(*gocb.Cluster)
	return ret0
}

// Cluster indicates an expected call of Cluster
func (mr *MockCouchBaseAdapterMockRecorder) Cluster() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockCouchBaseAdapter)(nil).Cluster))
}

// Log mocks base method
func (m *MockCouchBaseAdapter) Log(arg0 ...interface{}) {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Log", varargs...)
}

// Log indicates an expected call of Log
func (mr *MockCouchBaseAdapterMockRecorder) Log(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockCouchBaseAdapter)(nil).Log), arg0...)
}

// Logf mocks base method
func (m *MockCouchBaseAdapter) Logf(arg0 string, arg1 ...interface{}) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Logf", varargs...)
}

// Logf indicates an expected call of Logf
func (mr *MockCouchBaseAdapterMockRecorder) Logf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logf", reflect.TypeOf((*MockCouchBaseAdapter)(nil).Logf), varargs...)
}

// Open mocks base method
func (m *MockCouchBaseAdapter) Open() error {
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (mr *MockCouchBaseAdapterMockRecorder) Open() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockCouchBaseAdapter)(nil).Open))
}

// Operator mocks base method
func (m *MockCouchBaseAdapter) Operator(arg0 string) (tcb.Operator, error) {
	ret := m.ctrl.Call(m, "Operator", arg0)
	ret0, _ := ret[0].(tcb.Operator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Operator indicates an expected call of Operator
func (mr *MockCouchBaseAdapterMockRecorder) Operator(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Operator", reflect.TypeOf((*MockCouchBaseAdapter)(nil).Operator), arg0)
}

// MockConfigurer is a mock of Configurer interface
type MockConfigurer struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurerMockRecorder
}

// MockConfigurerMockRecorder is the mock recorder for MockConfigurer
type MockConfigurerMockRecorder struct {
	mock *MockConfigurer
}

// NewMockConfigurer creates a new mock instance
func NewMockConfigurer(ctrl *gomock.Controller) *MockConfigurer {
	mock := &MockConfigurer{ctrl: ctrl}
	mock.recorder = &MockConfigurerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigurer) EXPECT() *MockConfigurerMockRecorder {
	return m.recorder
}

// AddBucket mocks base method
func (m *MockConfigurer) AddBucket(arg0, arg1 string) (*gocb.Bucket, error) {
	ret := m.ctrl.Call(m, "AddBucket", arg0, arg1)
	ret0, _ := ret[0].(*gocb.Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBucket indicates an expected call of AddBucket
func (mr *MockConfigurerMockRecorder) AddBucket(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBucket", reflect.TypeOf((*MockConfigurer)(nil).AddBucket), arg0, arg1)
}

// Bucket mocks base method
func (m *MockConfigurer) Bucket(arg0 string) *gocb.Bucket {
	ret := m.ctrl.Call(m, "Bucket", arg0)
	ret0, _ := ret[0].(*gocb.Bucket)
	return ret0
}

// Bucket indicates an expected call of Bucket
func (mr *MockConfigurerMockRecorder) Bucket(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bucket", reflect.TypeOf((*MockConfigurer)(nil).Bucket), arg0)
}

// Close mocks base method
func (m *MockConfigurer) Close(arg0 string) error {
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockConfigurerMockRecorder) Close(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConfigurer)(nil).Close), arg0)
}

// CloseAll mocks base method
func (m *MockConfigurer) CloseAll() error {
	ret := m.ctrl.Call(m, "CloseAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseAll indicates an expected call of CloseAll
func (mr *MockConfigurerMockRecorder) CloseAll() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAll", reflect.TypeOf((*MockConfigurer)(nil).CloseAll))
}

// Cluster mocks base method
func (m *MockConfigurer) Cluster() *gocb.Cluster {
	ret := m.ctrl.Call(m, "Cluster")
	ret0, _ := ret[0].(*gocb.Cluster)
	return ret0
}

// Cluster indicates an expected call of Cluster
func (mr *MockConfigurerMockRecorder) Cluster() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockConfigurer)(nil).Cluster))
}

// Open mocks base method
func (m *MockConfigurer) Open() error {
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (mr *MockConfigurerMockRecorder) Open() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockConfigurer)(nil).Open))
}

// Operator mocks base method
func (m *MockConfigurer) Operator(arg0 string) (tcb.Operator, error) {
	ret := m.ctrl.Call(m, "Operator", arg0)
	ret0, _ := ret[0].(tcb.Operator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Operator indicates an expected call of Operator
func (mr *MockConfigurerMockRecorder) Operator(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Operator", reflect.TypeOf((*MockConfigurer)(nil).Operator), arg0)
}

// MockOperator is a mock of Operator interface
type MockOperator struct {
	ctrl     *gomock.Controller
	recorder *MockOperatorMockRecorder
}

// MockOperatorMockRecorder is the mock recorder for MockOperator
type MockOperatorMockRecorder struct {
	mock *MockOperator
}

// NewMockOperator creates a new mock instance
func NewMockOperator(ctrl *gomock.Controller) *MockOperator {
	mock := &MockOperator{ctrl: ctrl}
	mock.recorder = &MockOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOperator) EXPECT() *MockOperatorMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockOperator) Get(arg0 string, arg1 interface{}) (gocb.Cas, error) {
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(gocb.Cas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockOperatorMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOperator)(nil).Get), arg0, arg1)
}

// Insert mocks base method
func (m *MockOperator) Insert(arg0 string, arg1 interface{}, arg2 uint32) (gocb.Cas, error) {
	ret := m.ctrl.Call(m, "Insert", arg0, arg1, arg2)
	ret0, _ := ret[0].(gocb.Cas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert
func (mr *MockOperatorMockRecorder) Insert(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockOperator)(nil).Insert), arg0, arg1, arg2)
}

// N1qlQuery mocks base method
func (m *MockOperator) N1qlQuery(arg0 string, arg1 interface{}) (gocb.QueryResults, error) {
	ret := m.ctrl.Call(m, "N1qlQuery", arg0, arg1)
	ret0, _ := ret[0].(gocb.QueryResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// N1qlQuery indicates an expected call of N1qlQuery
func (mr *MockOperatorMockRecorder) N1qlQuery(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "N1qlQuery", reflect.TypeOf((*MockOperator)(nil).N1qlQuery), arg0, arg1)
}

// N1qlQueryWithMode mocks base method
func (m *MockOperator) N1qlQueryWithMode(arg0 gocb.ConsistencyMode, arg1 string, arg2 interface{}) (gocb.QueryResults, error) {
	ret := m.ctrl.Call(m, "N1qlQueryWithMode", arg0, arg1, arg2)
	ret0, _ := ret[0].(gocb.QueryResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// N1qlQueryWithMode indicates an expected call of N1qlQueryWithMode
func (mr *MockOperatorMockRecorder) N1qlQueryWithMode(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "N1qlQueryWithMode", reflect.TypeOf((*MockOperator)(nil).N1qlQueryWithMode), arg0, arg1, arg2)
}

// Remove mocks base method
func (m *MockOperator) Remove(arg0 string) (gocb.Cas, error) {
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(gocb.Cas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remove indicates an expected call of Remove
func (mr *MockOperatorMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockOperator)(nil).Remove), arg0)
}

// Upsert mocks base method
func (m *MockOperator) Upsert(arg0 string, arg1 interface{}, arg2 uint32) (gocb.Cas, error) {
	ret := m.ctrl.Call(m, "Upsert", arg0, arg1, arg2)
	ret0, _ := ret[0].(gocb.Cas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert
func (mr *MockOperatorMockRecorder) Upsert(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockOperator)(nil).Upsert), arg0, arg1, arg2)
}

// MockLogger is a mock of Logger interface
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Log mocks base method
func (m *MockLogger) Log(arg0 ...interface{}) {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Log", varargs...)
}

// Log indicates an expected call of Log
func (mr *MockLoggerMockRecorder) Log(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockLogger)(nil).Log), arg0...)
}

// Logf mocks base method
func (m *MockLogger) Logf(arg0 string, arg1 ...interface{}) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Logf", varargs...)
}

// Logf indicates an expected call of Logf
func (mr *MockLoggerMockRecorder) Logf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logf", reflect.TypeOf((*MockLogger)(nil).Logf), varargs...)
}
